
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftDICErightEXPONENTleftPLUSMINUSleftTIMESDIVIDEMODrightUMINUSnonassocLPARENRPARENDICE DIVIDE EXPONENT LPAREN MINUS MOD NUMBER PARAMETER PLUS RPAREN TIMES UMINUSexpression : expression PLUS expression\n        | expression MINUS expression\n        | expression TIMES expression\n        | expression DIVIDE expression\n        | expression MOD expression\n        | expression DICE expressionexpression : expression EXPONENT expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : DICEexpression : NUMBERexpression : PARAMETER'
    
_lr_action_items = {'MINUS':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,],[2,8,2,-10,2,-11,-12,2,2,2,2,2,2,2,-8,8,-1,-2,-3,-4,-5,8,8,-9,]),'LPAREN':([0,2,4,7,8,9,10,11,12,13,],[4,4,4,4,4,4,4,4,4,4,]),'DICE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,],[3,12,3,-10,3,-11,-12,3,3,3,3,3,3,3,-8,12,-1,-2,-3,-4,-5,-6,-7,-9,]),'NUMBER':([0,2,4,7,8,9,10,11,12,13,],[5,5,5,5,5,5,5,5,5,5,]),'PARAMETER':([0,2,4,7,8,9,10,11,12,13,],[6,6,6,6,6,6,6,6,6,6,]),'$end':([1,3,5,6,14,16,17,18,19,20,21,22,23,],[0,-10,-11,-12,-8,-1,-2,-3,-4,-5,-6,-7,-9,]),'PLUS':([1,3,5,6,14,15,16,17,18,19,20,21,22,23,],[7,-10,-11,-12,-8,7,-1,-2,-3,-4,-5,7,7,-9,]),'TIMES':([1,3,5,6,14,15,16,17,18,19,20,21,22,23,],[9,-10,-11,-12,-8,9,9,9,-3,-4,-5,9,9,-9,]),'DIVIDE':([1,3,5,6,14,15,16,17,18,19,20,21,22,23,],[10,-10,-11,-12,-8,10,10,10,-3,-4,-5,10,10,-9,]),'MOD':([1,3,5,6,14,15,16,17,18,19,20,21,22,23,],[11,-10,-11,-12,-8,11,11,11,-3,-4,-5,11,11,-9,]),'EXPONENT':([1,3,5,6,14,15,16,17,18,19,20,21,22,23,],[13,-10,-11,-12,-8,13,-1,-2,-3,-4,-5,13,13,-9,]),'RPAREN':([3,5,6,14,15,16,17,18,19,20,21,22,23,],[-10,-11,-12,-8,23,-1,-2,-3,-4,-5,-6,-7,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,4,7,8,9,10,11,12,13,],[1,14,15,16,17,18,19,20,21,22,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','dice_parser.py',68),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','dice_parser.py',69),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','dice_parser.py',70),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','dice_parser.py',71),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','dice_parser.py',72),
  ('expression -> expression DICE expression','expression',3,'p_expression_binop','dice_parser.py',73),
  ('expression -> expression EXPONENT expression','expression',3,'p_expression_exponent','dice_parser.py',105),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','dice_parser.py',109),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','dice_parser.py',113),
  ('expression -> DICE','expression',1,'p_expression_dice','dice_parser.py',117),
  ('expression -> NUMBER','expression',1,'p_expression_number','dice_parser.py',121),
  ('expression -> PARAMETER','expression',1,'p_expression_parameter','dice_parser.py',125),
]
