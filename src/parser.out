Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    UMINUS

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression PLUS expression
Rule 2     expression -> expression MINUS expression
Rule 3     expression -> expression TIMES expression
Rule 4     expression -> expression DIVIDE expression
Rule 5     expression -> expression MOD expression
Rule 6     expression -> expression EXPONENT expression
Rule 7     expression -> MINUS expression
Rule 8     expression -> LPAREN expression RPAREN
Rule 9     expression -> DICE
Rule 10    expression -> NUMBER
Rule 11    expression -> PARAMETER

Terminals, with rules where they appear

DICE                 : 9
DIVIDE               : 4
EXPONENT             : 6
LPAREN               : 8
MINUS                : 2 7
MOD                  : 5
NUMBER               : 10
PARAMETER            : 11
PLUS                 : 1
RPAREN               : 8
TIMES                : 3
UMINUS               : 
error                : 

Nonterminals, with rules where they appear

expression           : 1 1 2 2 3 3 4 4 5 5 6 6 7 8 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . expression MOD expression
    (6) expression -> . expression EXPONENT expression
    (7) expression -> . MINUS expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . DICE
    (10) expression -> . NUMBER
    (11) expression -> . PARAMETER

    MINUS           shift and go to state 2
    LPAREN          shift and go to state 3
    DICE            shift and go to state 4
    NUMBER          shift and go to state 5
    PARAMETER       shift and go to state 6

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression
    (5) expression -> expression . MOD expression
    (6) expression -> expression . EXPONENT expression

    PLUS            shift and go to state 7
    MINUS           shift and go to state 8
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10
    MOD             shift and go to state 11
    EXPONENT        shift and go to state 12


state 2

    (7) expression -> MINUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . expression MOD expression
    (6) expression -> . expression EXPONENT expression
    (7) expression -> . MINUS expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . DICE
    (10) expression -> . NUMBER
    (11) expression -> . PARAMETER

    MINUS           shift and go to state 2
    LPAREN          shift and go to state 3
    DICE            shift and go to state 4
    NUMBER          shift and go to state 5
    PARAMETER       shift and go to state 6

    expression                     shift and go to state 13

state 3

    (8) expression -> LPAREN . expression RPAREN
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . expression MOD expression
    (6) expression -> . expression EXPONENT expression
    (7) expression -> . MINUS expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . DICE
    (10) expression -> . NUMBER
    (11) expression -> . PARAMETER

    MINUS           shift and go to state 2
    LPAREN          shift and go to state 3
    DICE            shift and go to state 4
    NUMBER          shift and go to state 5
    PARAMETER       shift and go to state 6

    expression                     shift and go to state 14

state 4

    (9) expression -> DICE .

    PLUS            reduce using rule 9 (expression -> DICE .)
    MINUS           reduce using rule 9 (expression -> DICE .)
    TIMES           reduce using rule 9 (expression -> DICE .)
    DIVIDE          reduce using rule 9 (expression -> DICE .)
    MOD             reduce using rule 9 (expression -> DICE .)
    EXPONENT        reduce using rule 9 (expression -> DICE .)
    $end            reduce using rule 9 (expression -> DICE .)
    RPAREN          reduce using rule 9 (expression -> DICE .)


state 5

    (10) expression -> NUMBER .

    PLUS            reduce using rule 10 (expression -> NUMBER .)
    MINUS           reduce using rule 10 (expression -> NUMBER .)
    TIMES           reduce using rule 10 (expression -> NUMBER .)
    DIVIDE          reduce using rule 10 (expression -> NUMBER .)
    MOD             reduce using rule 10 (expression -> NUMBER .)
    EXPONENT        reduce using rule 10 (expression -> NUMBER .)
    $end            reduce using rule 10 (expression -> NUMBER .)
    RPAREN          reduce using rule 10 (expression -> NUMBER .)


state 6

    (11) expression -> PARAMETER .

    PLUS            reduce using rule 11 (expression -> PARAMETER .)
    MINUS           reduce using rule 11 (expression -> PARAMETER .)
    TIMES           reduce using rule 11 (expression -> PARAMETER .)
    DIVIDE          reduce using rule 11 (expression -> PARAMETER .)
    MOD             reduce using rule 11 (expression -> PARAMETER .)
    EXPONENT        reduce using rule 11 (expression -> PARAMETER .)
    $end            reduce using rule 11 (expression -> PARAMETER .)
    RPAREN          reduce using rule 11 (expression -> PARAMETER .)


state 7

    (1) expression -> expression PLUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . expression MOD expression
    (6) expression -> . expression EXPONENT expression
    (7) expression -> . MINUS expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . DICE
    (10) expression -> . NUMBER
    (11) expression -> . PARAMETER

    MINUS           shift and go to state 2
    LPAREN          shift and go to state 3
    DICE            shift and go to state 4
    NUMBER          shift and go to state 5
    PARAMETER       shift and go to state 6

    expression                     shift and go to state 15

state 8

    (2) expression -> expression MINUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . expression MOD expression
    (6) expression -> . expression EXPONENT expression
    (7) expression -> . MINUS expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . DICE
    (10) expression -> . NUMBER
    (11) expression -> . PARAMETER

    MINUS           shift and go to state 2
    LPAREN          shift and go to state 3
    DICE            shift and go to state 4
    NUMBER          shift and go to state 5
    PARAMETER       shift and go to state 6

    expression                     shift and go to state 16

state 9

    (3) expression -> expression TIMES . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . expression MOD expression
    (6) expression -> . expression EXPONENT expression
    (7) expression -> . MINUS expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . DICE
    (10) expression -> . NUMBER
    (11) expression -> . PARAMETER

    MINUS           shift and go to state 2
    LPAREN          shift and go to state 3
    DICE            shift and go to state 4
    NUMBER          shift and go to state 5
    PARAMETER       shift and go to state 6

    expression                     shift and go to state 17

state 10

    (4) expression -> expression DIVIDE . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . expression MOD expression
    (6) expression -> . expression EXPONENT expression
    (7) expression -> . MINUS expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . DICE
    (10) expression -> . NUMBER
    (11) expression -> . PARAMETER

    MINUS           shift and go to state 2
    LPAREN          shift and go to state 3
    DICE            shift and go to state 4
    NUMBER          shift and go to state 5
    PARAMETER       shift and go to state 6

    expression                     shift and go to state 18

state 11

    (5) expression -> expression MOD . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . expression MOD expression
    (6) expression -> . expression EXPONENT expression
    (7) expression -> . MINUS expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . DICE
    (10) expression -> . NUMBER
    (11) expression -> . PARAMETER

    MINUS           shift and go to state 2
    LPAREN          shift and go to state 3
    DICE            shift and go to state 4
    NUMBER          shift and go to state 5
    PARAMETER       shift and go to state 6

    expression                     shift and go to state 19

state 12

    (6) expression -> expression EXPONENT . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . expression MOD expression
    (6) expression -> . expression EXPONENT expression
    (7) expression -> . MINUS expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . DICE
    (10) expression -> . NUMBER
    (11) expression -> . PARAMETER

    MINUS           shift and go to state 2
    LPAREN          shift and go to state 3
    DICE            shift and go to state 4
    NUMBER          shift and go to state 5
    PARAMETER       shift and go to state 6

    expression                     shift and go to state 20

state 13

    (7) expression -> MINUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression
    (5) expression -> expression . MOD expression
    (6) expression -> expression . EXPONENT expression

    PLUS            reduce using rule 7 (expression -> MINUS expression .)
    MINUS           reduce using rule 7 (expression -> MINUS expression .)
    TIMES           reduce using rule 7 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 7 (expression -> MINUS expression .)
    MOD             reduce using rule 7 (expression -> MINUS expression .)
    EXPONENT        reduce using rule 7 (expression -> MINUS expression .)
    $end            reduce using rule 7 (expression -> MINUS expression .)
    RPAREN          reduce using rule 7 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]
  ! TIMES           [ shift and go to state 9 ]
  ! DIVIDE          [ shift and go to state 10 ]
  ! MOD             [ shift and go to state 11 ]
  ! EXPONENT        [ shift and go to state 12 ]


state 14

    (8) expression -> LPAREN expression . RPAREN
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression
    (5) expression -> expression . MOD expression
    (6) expression -> expression . EXPONENT expression

    RPAREN          shift and go to state 21
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10
    MOD             shift and go to state 11
    EXPONENT        shift and go to state 12


state 15

    (1) expression -> expression PLUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression
    (5) expression -> expression . MOD expression
    (6) expression -> expression . EXPONENT expression

    PLUS            reduce using rule 1 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 1 (expression -> expression PLUS expression .)
    EXPONENT        reduce using rule 1 (expression -> expression PLUS expression .)
    $end            reduce using rule 1 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 1 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10
    MOD             shift and go to state 11

  ! TIMES           [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]
  ! EXPONENT        [ shift and go to state 12 ]


state 16

    (2) expression -> expression MINUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression
    (5) expression -> expression . MOD expression
    (6) expression -> expression . EXPONENT expression

    PLUS            reduce using rule 2 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 2 (expression -> expression MINUS expression .)
    EXPONENT        reduce using rule 2 (expression -> expression MINUS expression .)
    $end            reduce using rule 2 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 2 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10
    MOD             shift and go to state 11

  ! TIMES           [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]
  ! EXPONENT        [ shift and go to state 12 ]


state 17

    (3) expression -> expression TIMES expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression
    (5) expression -> expression . MOD expression
    (6) expression -> expression . EXPONENT expression

    PLUS            reduce using rule 3 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 3 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 3 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 3 (expression -> expression TIMES expression .)
    MOD             reduce using rule 3 (expression -> expression TIMES expression .)
    EXPONENT        reduce using rule 3 (expression -> expression TIMES expression .)
    $end            reduce using rule 3 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 3 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]
  ! TIMES           [ shift and go to state 9 ]
  ! DIVIDE          [ shift and go to state 10 ]
  ! MOD             [ shift and go to state 11 ]
  ! EXPONENT        [ shift and go to state 12 ]


state 18

    (4) expression -> expression DIVIDE expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression
    (5) expression -> expression . MOD expression
    (6) expression -> expression . EXPONENT expression

    PLUS            reduce using rule 4 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 4 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 4 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 4 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 4 (expression -> expression DIVIDE expression .)
    EXPONENT        reduce using rule 4 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 4 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 4 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]
  ! TIMES           [ shift and go to state 9 ]
  ! DIVIDE          [ shift and go to state 10 ]
  ! MOD             [ shift and go to state 11 ]
  ! EXPONENT        [ shift and go to state 12 ]


state 19

    (5) expression -> expression MOD expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression
    (5) expression -> expression . MOD expression
    (6) expression -> expression . EXPONENT expression

    PLUS            reduce using rule 5 (expression -> expression MOD expression .)
    MINUS           reduce using rule 5 (expression -> expression MOD expression .)
    TIMES           reduce using rule 5 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 5 (expression -> expression MOD expression .)
    MOD             reduce using rule 5 (expression -> expression MOD expression .)
    EXPONENT        reduce using rule 5 (expression -> expression MOD expression .)
    $end            reduce using rule 5 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 5 (expression -> expression MOD expression .)

  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]
  ! TIMES           [ shift and go to state 9 ]
  ! DIVIDE          [ shift and go to state 10 ]
  ! MOD             [ shift and go to state 11 ]
  ! EXPONENT        [ shift and go to state 12 ]


state 20

    (6) expression -> expression EXPONENT expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression
    (5) expression -> expression . MOD expression
    (6) expression -> expression . EXPONENT expression

    $end            reduce using rule 6 (expression -> expression EXPONENT expression .)
    RPAREN          reduce using rule 6 (expression -> expression EXPONENT expression .)
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10
    MOD             shift and go to state 11
    EXPONENT        shift and go to state 12

  ! PLUS            [ reduce using rule 6 (expression -> expression EXPONENT expression .) ]
  ! MINUS           [ reduce using rule 6 (expression -> expression EXPONENT expression .) ]
  ! TIMES           [ reduce using rule 6 (expression -> expression EXPONENT expression .) ]
  ! DIVIDE          [ reduce using rule 6 (expression -> expression EXPONENT expression .) ]
  ! MOD             [ reduce using rule 6 (expression -> expression EXPONENT expression .) ]
  ! EXPONENT        [ reduce using rule 6 (expression -> expression EXPONENT expression .) ]


state 21

    (8) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    EXPONENT        reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 8 (expression -> LPAREN expression RPAREN .)

